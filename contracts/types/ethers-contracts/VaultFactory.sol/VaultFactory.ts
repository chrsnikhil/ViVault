/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from '../common.js';

export interface VaultFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | 'allVaults'
      | 'createVault'
      | 'getAllVaults'
      | 'getVault'
      | 'getVaultCount'
      | 'hasVault'
      | 'owner'
      | 'removeVault'
      | 'renounceOwnership'
      | 'transferOwnership'
      | 'userVaults'
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: 'OwnershipTransferred' | 'VaultCreated' | 'VaultRemoved'
  ): EventFragment;

  encodeFunctionData(functionFragment: 'allVaults', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'createVault', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getAllVaults', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getVault', values: [AddressLike]): string;
  encodeFunctionData(functionFragment: 'getVaultCount', values?: undefined): string;
  encodeFunctionData(functionFragment: 'hasVault', values: [AddressLike]): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'removeVault', values: [AddressLike]): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [AddressLike]): string;
  encodeFunctionData(functionFragment: 'userVaults', values: [AddressLike]): string;

  decodeFunctionResult(functionFragment: 'allVaults', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'createVault', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAllVaults', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getVault', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getVaultCount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hasVault', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeVault', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userVaults', data: BytesLike): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VaultCreatedEvent {
  export type InputTuple = [user: AddressLike, vault: AddressLike, timestamp: BigNumberish];
  export type OutputTuple = [user: string, vault: string, timestamp: bigint];
  export interface OutputObject {
    user: string;
    vault: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VaultRemovedEvent {
  export type InputTuple = [user: AddressLike, vault: AddressLike];
  export type OutputTuple = [user: string, vault: string];
  export interface OutputObject {
    user: string;
    vault: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface VaultFactory extends BaseContract {
  connect(runner?: ContractRunner | null): VaultFactory;
  waitForDeployment(): Promise<this>;

  interface: VaultFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;

  allVaults: TypedContractMethod<[arg0: BigNumberish], [string], 'view'>;

  createVault: TypedContractMethod<[], [string], 'nonpayable'>;

  getAllVaults: TypedContractMethod<[], [string[]], 'view'>;

  getVault: TypedContractMethod<[user: AddressLike], [string], 'view'>;

  getVaultCount: TypedContractMethod<[], [bigint], 'view'>;

  hasVault: TypedContractMethod<[user: AddressLike], [boolean], 'view'>;

  owner: TypedContractMethod<[], [string], 'view'>;

  removeVault: TypedContractMethod<[user: AddressLike], [void], 'nonpayable'>;

  renounceOwnership: TypedContractMethod<[], [void], 'nonpayable'>;

  transferOwnership: TypedContractMethod<[newOwner: AddressLike], [void], 'nonpayable'>;

  userVaults: TypedContractMethod<[arg0: AddressLike], [string], 'view'>;

  getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

  getFunction(
    nameOrSignature: 'allVaults'
  ): TypedContractMethod<[arg0: BigNumberish], [string], 'view'>;
  getFunction(nameOrSignature: 'createVault'): TypedContractMethod<[], [string], 'nonpayable'>;
  getFunction(nameOrSignature: 'getAllVaults'): TypedContractMethod<[], [string[]], 'view'>;
  getFunction(
    nameOrSignature: 'getVault'
  ): TypedContractMethod<[user: AddressLike], [string], 'view'>;
  getFunction(nameOrSignature: 'getVaultCount'): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'hasVault'
  ): TypedContractMethod<[user: AddressLike], [boolean], 'view'>;
  getFunction(nameOrSignature: 'owner'): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'removeVault'
  ): TypedContractMethod<[user: AddressLike], [void], 'nonpayable'>;
  getFunction(nameOrSignature: 'renounceOwnership'): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'transferOwnership'
  ): TypedContractMethod<[newOwner: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'userVaults'
  ): TypedContractMethod<[arg0: AddressLike], [string], 'view'>;

  getEvent(
    key: 'OwnershipTransferred'
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: 'VaultCreated'
  ): TypedContractEvent<
    VaultCreatedEvent.InputTuple,
    VaultCreatedEvent.OutputTuple,
    VaultCreatedEvent.OutputObject
  >;
  getEvent(
    key: 'VaultRemoved'
  ): TypedContractEvent<
    VaultRemovedEvent.InputTuple,
    VaultRemovedEvent.OutputTuple,
    VaultRemovedEvent.OutputObject
  >;

  filters: {
    'OwnershipTransferred(address,address)': TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    'VaultCreated(address,address,uint256)': TypedContractEvent<
      VaultCreatedEvent.InputTuple,
      VaultCreatedEvent.OutputTuple,
      VaultCreatedEvent.OutputObject
    >;
    VaultCreated: TypedContractEvent<
      VaultCreatedEvent.InputTuple,
      VaultCreatedEvent.OutputTuple,
      VaultCreatedEvent.OutputObject
    >;

    'VaultRemoved(address,address)': TypedContractEvent<
      VaultRemovedEvent.InputTuple,
      VaultRemovedEvent.OutputTuple,
      VaultRemovedEvent.OutputObject
    >;
    VaultRemoved: TypedContractEvent<
      VaultRemovedEvent.InputTuple,
      VaultRemovedEvent.OutputTuple,
      VaultRemovedEvent.OutputObject
    >;
  };
}
