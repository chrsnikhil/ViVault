/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from '../common.js';

export interface UserVaultInterface extends Interface {
  getFunction(
    nameOrSignature:
      | 'deposit'
      | 'factory'
      | 'getBalance'
      | 'getBalances'
      | 'getSupportedTokenCount'
      | 'getSupportedTokens'
      | 'getVaultInfo'
      | 'isTokenSupported'
      | 'owner'
      | 'removeToken'
      | 'renounceOwnership'
      | 'supportedTokens'
      | 'tokenBalances'
      | 'transferOwnership'
      | 'withdraw'
      | 'withdrawAll'
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | 'OwnershipTransferred'
      | 'TokenAdded'
      | 'TokenRemoved'
      | 'TokensReceived'
      | 'TokensWithdrawn'
  ): EventFragment;

  encodeFunctionData(functionFragment: 'deposit', values: [AddressLike, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'factory', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getBalance', values: [AddressLike]): string;
  encodeFunctionData(functionFragment: 'getBalances', values: [AddressLike[]]): string;
  encodeFunctionData(functionFragment: 'getSupportedTokenCount', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getSupportedTokens', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getVaultInfo', values?: undefined): string;
  encodeFunctionData(functionFragment: 'isTokenSupported', values: [AddressLike]): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'removeToken', values: [AddressLike]): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'supportedTokens', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'tokenBalances', values: [AddressLike]): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [AddressLike]): string;
  encodeFunctionData(functionFragment: 'withdraw', values: [AddressLike, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'withdrawAll', values: [AddressLike]): string;

  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'factory', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getBalances', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getSupportedTokenCount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getSupportedTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getVaultInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isTokenSupported', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'supportedTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tokenBalances', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawAll', data: BytesLike): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenAddedEvent {
  export type InputTuple = [token: AddressLike, timestamp: BigNumberish];
  export type OutputTuple = [token: string, timestamp: bigint];
  export interface OutputObject {
    token: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenRemovedEvent {
  export type InputTuple = [token: AddressLike, timestamp: BigNumberish];
  export type OutputTuple = [token: string, timestamp: bigint];
  export interface OutputObject {
    token: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensReceivedEvent {
  export type InputTuple = [
    token: AddressLike,
    amount: BigNumberish,
    from: AddressLike,
    timestamp: BigNumberish,
  ];
  export type OutputTuple = [token: string, amount: bigint, from: string, timestamp: bigint];
  export interface OutputObject {
    token: string;
    amount: bigint;
    from: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensWithdrawnEvent {
  export type InputTuple = [
    token: AddressLike,
    amount: BigNumberish,
    to: AddressLike,
    timestamp: BigNumberish,
  ];
  export type OutputTuple = [token: string, amount: bigint, to: string, timestamp: bigint];
  export interface OutputObject {
    token: string;
    amount: bigint;
    to: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface UserVault extends BaseContract {
  connect(runner?: ContractRunner | null): UserVault;
  waitForDeployment(): Promise<this>;

  interface: UserVaultInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;

  deposit: TypedContractMethod<[token: AddressLike, amount: BigNumberish], [void], 'nonpayable'>;

  factory: TypedContractMethod<[], [string], 'view'>;

  getBalance: TypedContractMethod<[token: AddressLike], [bigint], 'view'>;

  getBalances: TypedContractMethod<[tokens: AddressLike[]], [bigint[]], 'view'>;

  getSupportedTokenCount: TypedContractMethod<[], [bigint], 'view'>;

  getSupportedTokens: TypedContractMethod<[], [string[]], 'view'>;

  getVaultInfo: TypedContractMethod<
    [],
    [
      [string, string, bigint, bigint] & {
        ownerAddress: string;
        factoryAddress: string;
        tokenCount: bigint;
        totalValue: bigint;
      },
    ],
    'view'
  >;

  isTokenSupported: TypedContractMethod<[arg0: AddressLike], [boolean], 'view'>;

  owner: TypedContractMethod<[], [string], 'view'>;

  removeToken: TypedContractMethod<[token: AddressLike], [void], 'nonpayable'>;

  renounceOwnership: TypedContractMethod<[], [void], 'nonpayable'>;

  supportedTokens: TypedContractMethod<[arg0: BigNumberish], [string], 'view'>;

  tokenBalances: TypedContractMethod<[arg0: AddressLike], [bigint], 'view'>;

  transferOwnership: TypedContractMethod<[newOwner: AddressLike], [void], 'nonpayable'>;

  withdraw: TypedContractMethod<[token: AddressLike, amount: BigNumberish], [void], 'nonpayable'>;

  withdrawAll: TypedContractMethod<[token: AddressLike], [void], 'nonpayable'>;

  getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

  getFunction(
    nameOrSignature: 'deposit'
  ): TypedContractMethod<[token: AddressLike, amount: BigNumberish], [void], 'nonpayable'>;
  getFunction(nameOrSignature: 'factory'): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'getBalance'
  ): TypedContractMethod<[token: AddressLike], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'getBalances'
  ): TypedContractMethod<[tokens: AddressLike[]], [bigint[]], 'view'>;
  getFunction(nameOrSignature: 'getSupportedTokenCount'): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(nameOrSignature: 'getSupportedTokens'): TypedContractMethod<[], [string[]], 'view'>;
  getFunction(
    nameOrSignature: 'getVaultInfo'
  ): TypedContractMethod<
    [],
    [
      [string, string, bigint, bigint] & {
        ownerAddress: string;
        factoryAddress: string;
        tokenCount: bigint;
        totalValue: bigint;
      },
    ],
    'view'
  >;
  getFunction(
    nameOrSignature: 'isTokenSupported'
  ): TypedContractMethod<[arg0: AddressLike], [boolean], 'view'>;
  getFunction(nameOrSignature: 'owner'): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'removeToken'
  ): TypedContractMethod<[token: AddressLike], [void], 'nonpayable'>;
  getFunction(nameOrSignature: 'renounceOwnership'): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'supportedTokens'
  ): TypedContractMethod<[arg0: BigNumberish], [string], 'view'>;
  getFunction(
    nameOrSignature: 'tokenBalances'
  ): TypedContractMethod<[arg0: AddressLike], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'transferOwnership'
  ): TypedContractMethod<[newOwner: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'withdraw'
  ): TypedContractMethod<[token: AddressLike, amount: BigNumberish], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'withdrawAll'
  ): TypedContractMethod<[token: AddressLike], [void], 'nonpayable'>;

  getEvent(
    key: 'OwnershipTransferred'
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: 'TokenAdded'
  ): TypedContractEvent<
    TokenAddedEvent.InputTuple,
    TokenAddedEvent.OutputTuple,
    TokenAddedEvent.OutputObject
  >;
  getEvent(
    key: 'TokenRemoved'
  ): TypedContractEvent<
    TokenRemovedEvent.InputTuple,
    TokenRemovedEvent.OutputTuple,
    TokenRemovedEvent.OutputObject
  >;
  getEvent(
    key: 'TokensReceived'
  ): TypedContractEvent<
    TokensReceivedEvent.InputTuple,
    TokensReceivedEvent.OutputTuple,
    TokensReceivedEvent.OutputObject
  >;
  getEvent(
    key: 'TokensWithdrawn'
  ): TypedContractEvent<
    TokensWithdrawnEvent.InputTuple,
    TokensWithdrawnEvent.OutputTuple,
    TokensWithdrawnEvent.OutputObject
  >;

  filters: {
    'OwnershipTransferred(address,address)': TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    'TokenAdded(address,uint256)': TypedContractEvent<
      TokenAddedEvent.InputTuple,
      TokenAddedEvent.OutputTuple,
      TokenAddedEvent.OutputObject
    >;
    TokenAdded: TypedContractEvent<
      TokenAddedEvent.InputTuple,
      TokenAddedEvent.OutputTuple,
      TokenAddedEvent.OutputObject
    >;

    'TokenRemoved(address,uint256)': TypedContractEvent<
      TokenRemovedEvent.InputTuple,
      TokenRemovedEvent.OutputTuple,
      TokenRemovedEvent.OutputObject
    >;
    TokenRemoved: TypedContractEvent<
      TokenRemovedEvent.InputTuple,
      TokenRemovedEvent.OutputTuple,
      TokenRemovedEvent.OutputObject
    >;

    'TokensReceived(address,uint256,address,uint256)': TypedContractEvent<
      TokensReceivedEvent.InputTuple,
      TokensReceivedEvent.OutputTuple,
      TokensReceivedEvent.OutputObject
    >;
    TokensReceived: TypedContractEvent<
      TokensReceivedEvent.InputTuple,
      TokensReceivedEvent.OutputTuple,
      TokensReceivedEvent.OutputObject
    >;

    'TokensWithdrawn(address,uint256,address,uint256)': TypedContractEvent<
      TokensWithdrawnEvent.InputTuple,
      TokensWithdrawnEvent.OutputTuple,
      TokensWithdrawnEvent.OutputObject
    >;
    TokensWithdrawn: TypedContractEvent<
      TokensWithdrawnEvent.InputTuple,
      TokensWithdrawnEvent.OutputTuple,
      TokensWithdrawnEvent.OutputObject
    >;
  };
}
