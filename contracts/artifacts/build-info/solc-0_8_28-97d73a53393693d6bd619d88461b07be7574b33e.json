{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-97d73a53393693d6bd619d88461b07be7574b33e",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/UserVault.sol": "project/contracts/UserVault.sol",
    "contracts/VaultFactory.sol": "project/contracts/VaultFactory.sol",
    "contracts/VolatilityIndex.sol": "project/contracts/VolatilityIndex.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": ["ast"],
          "*": ["abi", "evm.bytecode", "evm.deployedBytecode", "evm.methodIdentifiers", "metadata"]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@pythnetwork/pyth-sdk-solidity/=npm/@pythnetwork/pyth-sdk-solidity@4.2.0/",
        "project/:@pythnetwork/pyth-sdk-solidity/=npm/@pythnetwork/pyth-sdk-solidity@4.2.0/"
      ]
    },
    "sources": {
      "npm/@openzeppelin/contracts@5.4.0/access/Ownable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/interfaces/IERC1363.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC1363.sol)\n\npragma solidity >=0.6.2;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @title IERC1363\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n *\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\n */\ninterface IERC1363 is IERC20, IERC165 {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\n     * 0xb0202a11 ===\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n     */\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @param data Additional data with no specified format, sent in call to `spender`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/interfaces/IERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC165.sol)\n\npragma solidity >=0.4.16;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/interfaces/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC20.sol)\n\npragma solidity >=0.4.16;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC20/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC20/utils/SafeERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC1363} from \"../../../interfaces/IERC1363.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    /**\n     * @dev An operation with an ERC-20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     *\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\n     * only sets the \"standard\" allowance. Any temporary allowance will remain active, in addition to the value being\n     * set here.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            safeTransfer(token, to, value);\n        } else if (!token.transferAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferFromAndCallRelaxed(\n        IERC1363 token,\n        address from,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) internal {\n        if (to.code.length == 0) {\n            safeTransferFrom(token, from, to, value);\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n     * once without retrying, and relies on the returned value to be true.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            forceApprove(token, to, value);\n        } else if (!token.approveAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            // bubble errors\n            if iszero(success) {\n                let ptr := mload(0x40)\n                returndatacopy(ptr, 0, returndatasize())\n                revert(ptr, returndatasize())\n            }\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/introspection/IERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/ReentrancyGuard.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
      },
      "npm/@pythnetwork/pyth-sdk-solidity@4.2.0/IPyth.sol": {
        "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\nimport \"./PythStructs.sol\";\nimport \"./IPythEvents.sol\";\n\n/// @title Consume prices from the Pyth Network (https://pyth.network/).\n/// @dev Please refer to the guidance at https://docs.pyth.network/documentation/pythnet-price-feeds/best-practices for how to consume prices safely.\n/// @author Pyth Data Association\ninterface IPyth is IPythEvents {\n    /// @notice Returns the price of a price feed without any sanity checks.\n    /// @dev This function returns the most recent price update in this contract without any recency checks.\n    /// This function is unsafe as the returned price update may be arbitrarily far in the past.\n    ///\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\n    /// sufficiently recent for their application. If you are considering using this function, it may be\n    /// safer / easier to use `getPriceNoOlderThan`.\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\n    function getPriceUnsafe(\n        bytes32 id\n    ) external view returns (PythStructs.Price memory price);\n\n    /// @notice Returns the price that is no older than `age` seconds of the current time.\n    /// @dev This function is a sanity-checked version of `getPriceUnsafe` which is useful in\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\n    /// recently.\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\n    function getPriceNoOlderThan(\n        bytes32 id,\n        uint age\n    ) external view returns (PythStructs.Price memory price);\n\n    /// @notice Returns the exponentially-weighted moving average price of a price feed without any sanity checks.\n    /// @dev This function returns the same price as `getEmaPrice` in the case where the price is available.\n    /// However, if the price is not recent this function returns the latest available price.\n    ///\n    /// The returned price can be from arbitrarily far in the past; this function makes no guarantees that\n    /// the returned price is recent or useful for any particular application.\n    ///\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\n    /// sufficiently recent for their application. If you are considering using this function, it may be\n    /// safer / easier to use either `getEmaPrice` or `getEmaPriceNoOlderThan`.\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\n    function getEmaPriceUnsafe(\n        bytes32 id\n    ) external view returns (PythStructs.Price memory price);\n\n    /// @notice Returns the exponentially-weighted moving average price that is no older than `age` seconds\n    /// of the current time.\n    /// @dev This function is a sanity-checked version of `getEmaPriceUnsafe` which is useful in\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\n    /// recently.\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\n    function getEmaPriceNoOlderThan(\n        bytes32 id,\n        uint age\n    ) external view returns (PythStructs.Price memory price);\n\n    /// @notice Update price feeds with given update messages.\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\n    /// `getUpdateFee` with the length of the `updateData` array.\n    /// Prices will be updated if they are more recent than the current stored prices.\n    /// The call will succeed even if the update is not the most recent.\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid.\n    /// @param updateData Array of price update data.\n    function updatePriceFeeds(bytes[] calldata updateData) external payable;\n\n    /// @notice Wrapper around updatePriceFeeds that rejects fast if a price update is not necessary. A price update is\n    /// necessary if the current on-chain publishTime is older than the given publishTime. It relies solely on the\n    /// given `publishTimes` for the price feeds and does not read the actual price update publish time within `updateData`.\n    ///\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\n    /// `getUpdateFee` with the length of the `updateData` array.\n    ///\n    /// `priceIds` and `publishTimes` are two arrays with the same size that correspond to senders known publishTime\n    /// of each priceId when calling this method. If all of price feeds within `priceIds` have updated and have\n    /// a newer or equal publish time than the given publish time, it will reject the transaction to save gas.\n    /// Otherwise, it calls updatePriceFeeds method to update the prices.\n    ///\n    /// @dev Reverts if update is not needed or the transferred fee is not sufficient or the updateData is invalid.\n    /// @param updateData Array of price update data.\n    /// @param priceIds Array of price ids.\n    /// @param publishTimes Array of publishTimes. `publishTimes[i]` corresponds to known `publishTime` of `priceIds[i]`\n    function updatePriceFeedsIfNecessary(\n        bytes[] calldata updateData,\n        bytes32[] calldata priceIds,\n        uint64[] calldata publishTimes\n    ) external payable;\n\n    /// @notice Returns the required fee to update an array of price updates.\n    /// @param updateData Array of price update data.\n    /// @return feeAmount The required fee in Wei.\n    function getUpdateFee(\n        bytes[] calldata updateData\n    ) external view returns (uint feeAmount);\n\n    /// @notice Returns the required fee to update a TWAP price.\n    /// @param updateData Array of price update data.\n    /// @return feeAmount The required fee in Wei.\n    function getTwapUpdateFee(\n        bytes[] calldata updateData\n    ) external view returns (uint feeAmount);\n\n    /// @notice Parse `updateData` and return price feeds of the given `priceIds` if they are all published\n    /// within `minPublishTime` and `maxPublishTime`.\n    ///\n    /// You can use this method if you want to use a Pyth price at a fixed time and not the most recent price;\n    /// otherwise, please consider using `updatePriceFeeds`. This method may store the price updates on-chain, if they\n    /// are more recent than the current stored prices.\n    ///\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\n    /// `getUpdateFee` with the length of the `updateData` array.\n    ///\n    ///\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid or there is\n    /// no update for any of the given `priceIds` within the given time range.\n    /// @param updateData Array of price update data.\n    /// @param priceIds Array of price ids.\n    /// @param minPublishTime minimum acceptable publishTime for the given `priceIds`.\n    /// @param maxPublishTime maximum acceptable publishTime for the given `priceIds`.\n    /// @return priceFeeds Array of the price feeds corresponding to the given `priceIds` (with the same order).\n    function parsePriceFeedUpdates(\n        bytes[] calldata updateData,\n        bytes32[] calldata priceIds,\n        uint64 minPublishTime,\n        uint64 maxPublishTime\n    ) external payable returns (PythStructs.PriceFeed[] memory priceFeeds);\n\n    /// @notice Parse `updateData` and return price feeds of the given `priceIds` if they are all published\n    /// within `minPublishTime` and `maxPublishTime,` but choose to store price updates if `storeUpdatesIfFresh`.\n    ///\n    /// You can use this method if you want to use a Pyth price at a fixed time and not the most recent price;\n    /// otherwise, please consider using `updatePriceFeeds`. This method may store the price updates on-chain, if they\n    /// are more recent than the current stored prices.\n    ///\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\n    /// `getUpdateFee` with the length of the `updateData` array.\n    ///\n    /// This method will eventually allow the caller to determine whether parsed price feeds should update\n    /// the stored values as well.\n    ///\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid or there is\n    /// no update for any of the given `priceIds` within the given time range.\n    /// @param updateData Array of price update data.\n    /// @param priceIds Array of price ids.\n    /// @param minAllowedPublishTime minimum acceptable publishTime for the given `priceIds`.\n    /// @param maxAllowedPublishTime maximum acceptable publishTime for the given `priceIds`.\n    /// @param storeUpdatesIfFresh flag for the parse function to\n    /// @return priceFeeds Array of the price feeds corresponding to the given `priceIds` (with the same order).\n    function parsePriceFeedUpdatesWithConfig(\n        bytes[] calldata updateData,\n        bytes32[] calldata priceIds,\n        uint64 minAllowedPublishTime,\n        uint64 maxAllowedPublishTime,\n        bool checkUniqueness,\n        bool checkUpdateDataIsMinimal,\n        bool storeUpdatesIfFresh\n    )\n        external\n        payable\n        returns (\n            PythStructs.PriceFeed[] memory priceFeeds,\n            uint64[] memory slots\n        );\n\n    /// @notice Parse time-weighted average price (TWAP) from two consecutive price updates for the given `priceIds`.\n    ///\n    /// This method calculates TWAP between two data points by processing the difference in cumulative price values\n    /// divided by the time period. It requires exactly two updates that contain valid price information\n    /// for all the requested price IDs.\n    ///\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\n    /// `getUpdateFee` with the updateData array.\n    ///\n    /// @dev Reverts if:\n    /// - The transferred fee is not sufficient\n    /// - The updateData is invalid or malformed\n    /// - The updateData array does not contain exactly 2 updates\n    /// - There is no update for any of the given `priceIds`\n    /// - The time ordering between data points is invalid (start time must be before end time)\n    /// @param updateData Array containing exactly two price updates (start and end points for TWAP calculation)\n    /// @param priceIds Array of price ids to calculate TWAP for\n    /// @return twapPriceFeeds Array of TWAP price feeds corresponding to the given `priceIds` (with the same order)\n    function parseTwapPriceFeedUpdates(\n        bytes[] calldata updateData,\n        bytes32[] calldata priceIds\n    )\n        external\n        payable\n        returns (PythStructs.TwapPriceFeed[] memory twapPriceFeeds);\n\n    /// @notice Similar to `parsePriceFeedUpdates` but ensures the updates returned are\n    /// the first updates published in minPublishTime. That is, if there are multiple updates for a given timestamp,\n    /// this method will return the first update. This method may store the price updates on-chain, if they\n    /// are more recent than the current stored prices.\n    ///\n    ///\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid or there is\n    /// no update for any of the given `priceIds` within the given time range and uniqueness condition.\n    /// @param updateData Array of price update data.\n    /// @param priceIds Array of price ids.\n    /// @param minPublishTime minimum acceptable publishTime for the given `priceIds`.\n    /// @param maxPublishTime maximum acceptable publishTime for the given `priceIds`.\n    /// @return priceFeeds Array of the price feeds corresponding to the given `priceIds` (with the same order).\n    function parsePriceFeedUpdatesUnique(\n        bytes[] calldata updateData,\n        bytes32[] calldata priceIds,\n        uint64 minPublishTime,\n        uint64 maxPublishTime\n    ) external payable returns (PythStructs.PriceFeed[] memory priceFeeds);\n}\n"
      },
      "npm/@pythnetwork/pyth-sdk-solidity@4.2.0/IPythEvents.sol": {
        "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\n/// @title IPythEvents contains the events that Pyth contract emits.\n/// @dev This interface can be used for listening to the updates for off-chain and testing purposes.\ninterface IPythEvents {\n    /// @dev Emitted when the price feed with `id` has received a fresh update.\n    /// @param id The Pyth Price Feed ID.\n    /// @param publishTime Publish time of the given price update.\n    /// @param price Price of the given price update.\n    /// @param conf Confidence interval of the given price update.\n    event PriceFeedUpdate(\n        bytes32 indexed id,\n        uint64 publishTime,\n        int64 price,\n        uint64 conf\n    );\n\n    /// @dev Emitted when the TWAP price feed with `id` has received a fresh update.\n    /// @param id The Pyth Price Feed ID.\n    /// @param startTime Start time of the TWAP.\n    /// @param endTime End time of the TWAP.\n    /// @param twapPrice Price of the TWAP.\n    /// @param twapConf Confidence interval of the TWAP.\n    /// @param downSlotsRatio Down slot ratio of the TWAP.\n    event TwapPriceFeedUpdate(\n        bytes32 indexed id,\n        uint64 startTime,\n        uint64 endTime,\n        int64 twapPrice,\n        uint64 twapConf,\n        uint32 downSlotsRatio\n    );\n}\n"
      },
      "npm/@pythnetwork/pyth-sdk-solidity@4.2.0/PythStructs.sol": {
        "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\ncontract PythStructs {\n    // A price with a degree of uncertainty, represented as a price +- a confidence interval.\n    //\n    // The confidence interval roughly corresponds to the standard error of a normal distribution.\n    // Both the price and confidence are stored in a fixed-point numeric representation,\n    // `x * (10^expo)`, where `expo` is the exponent.\n    //\n    // Please refer to the documentation at https://docs.pyth.network/documentation/pythnet-price-feeds/best-practices for how\n    // to how this price safely.\n    struct Price {\n        // Price\n        int64 price;\n        // Confidence interval around the price\n        uint64 conf;\n        // Price exponent\n        int32 expo;\n        // Unix timestamp describing when the price was published\n        uint publishTime;\n    }\n\n    // PriceFeed represents a current aggregate price from pyth publisher feeds.\n    struct PriceFeed {\n        // The price ID.\n        bytes32 id;\n        // Latest available price\n        Price price;\n        // Latest available exponentially-weighted moving average price\n        Price emaPrice;\n    }\n\n    struct TwapPriceFeed {\n        // The price ID.\n        bytes32 id;\n        // Start time of the TWAP\n        uint64 startTime;\n        // End time of the TWAP\n        uint64 endTime;\n        // TWAP price\n        Price twap;\n        // Down slot ratio represents the ratio of price feed updates that were missed or unavailable\n        // during the TWAP period, expressed as a fixed-point number between 0 and 1e6 (100%).\n        // For example:\n        //   - 0 means all price updates were available\n        //   - 500_000 means 50% of updates were missed\n        //   - 1_000_000 means all updates were missed\n        // This can be used to assess the quality/reliability of the TWAP calculation.\n        // Applications should define a maximum acceptable ratio (e.g. 100000 for 10%)\n        // and revert if downSlotsRatio exceeds it.\n        uint32 downSlotsRatio;\n    }\n\n    // Information used to calculate time-weighted average prices (TWAP)\n    struct TwapPriceInfo {\n        // slot 1\n        int128 cumulativePrice;\n        uint128 cumulativeConf;\n        // slot 2\n        uint64 numDownSlots;\n        uint64 publishSlot;\n        uint64 publishTime;\n        uint64 prevPublishTime;\n        // slot 3\n        int32 expo;\n    }\n}\n"
      },
      "project/contracts/UserVault.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.28;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\r\n\r\n/**\r\n * @title UserVault\r\n * @dev Individual vault contract for each user, linked to their Vincent wallet\r\n * @notice Can hold any ERC-20 token and supports deposits/withdrawals\r\n */\r\ncontract UserVault is Ownable, ReentrancyGuard {\r\n    using SafeERC20 for IERC20;\r\n    \r\n    // Factory contract address\r\n    address public immutable factory;\r\n    \r\n    // Mapping from token address to balance\r\n    mapping(address => uint256) public tokenBalances;\r\n    \r\n    // Array of supported token addresses\r\n    address[] public supportedTokens;\r\n    \r\n    // Mapping to check if token is supported\r\n    mapping(address => bool) public isTokenSupported;\r\n    \r\n    // Events\r\n    event TokensReceived(address indexed token, uint256 amount, address indexed from, uint256 timestamp);\r\n    event TokensWithdrawn(address indexed token, uint256 amount, address indexed to, uint256 timestamp);\r\n    event TokenAdded(address indexed token, uint256 timestamp);\r\n    event TokenRemoved(address indexed token, uint256 timestamp);\r\n    \r\n    /**\r\n     * @dev Constructor sets the owner (Vincent wallet address) and factory\r\n     * @param _owner The Vincent wallet address that owns this vault\r\n     * @param _factory The VaultFactory contract address\r\n     */\r\n    constructor(address _owner, address _factory) Ownable(_owner) {\r\n        factory = _factory;\r\n    }\r\n    \r\n    /**\r\n     * @dev Deposits ERC-20 tokens into the vault\r\n     * @param token The ERC-20 token contract address\r\n     * @param amount The amount of tokens to deposit\r\n     */\r\n    function deposit(address token, uint256 amount) external nonReentrant {\r\n        require(token != address(0), \"UserVault: Invalid token address\");\r\n        require(amount > 0, \"UserVault: Amount must be greater than 0\");\r\n        \r\n        IERC20 tokenContract = IERC20(token);\r\n        \r\n        // Check if user has sufficient balance\r\n        require(tokenContract.balanceOf(msg.sender) >= amount, \"UserVault: Insufficient token balance\");\r\n        \r\n        // Check if user has approved this contract to spend tokens\r\n        require(tokenContract.allowance(msg.sender, address(this)) >= amount, \"UserVault: Insufficient token allowance\");\r\n        \r\n        // Transfer tokens from user to vault\r\n        tokenContract.safeTransferFrom(msg.sender, address(this), amount);\r\n        \r\n        // Update vault balance\r\n        tokenBalances[token] += amount;\r\n        \r\n        // Add token to supported tokens if not already added\r\n        if (!isTokenSupported[token]) {\r\n            supportedTokens.push(token);\r\n            isTokenSupported[token] = true;\r\n            emit TokenAdded(token, block.timestamp);\r\n        }\r\n        \r\n        emit TokensReceived(token, amount, msg.sender, block.timestamp);\r\n    }\r\n    \r\n    /**\r\n     * @dev Withdraws ERC-20 tokens from the vault\r\n     * @param token The ERC-20 token contract address\r\n     * @param amount The amount of tokens to withdraw\r\n     */\r\n    function withdraw(address token, uint256 amount) external onlyOwner nonReentrant {\r\n        require(token != address(0), \"UserVault: Invalid token address\");\r\n        require(amount > 0, \"UserVault: Amount must be greater than 0\");\r\n        require(tokenBalances[token] >= amount, \"UserVault: Insufficient vault balance\");\r\n        \r\n        // Update vault balance\r\n        tokenBalances[token] -= amount;\r\n        \r\n        // Transfer tokens to owner\r\n        IERC20(token).safeTransfer(owner(), amount);\r\n        \r\n        emit TokensWithdrawn(token, amount, owner(), block.timestamp);\r\n    }\r\n    \r\n    /**\r\n     * @dev Withdraws ERC-20 tokens from the vault to a specific address\r\n     * @param token The ERC-20 token contract address\r\n     * @param amount The amount of tokens to withdraw\r\n     * @param to The address to send tokens to\r\n     */\r\n    function withdrawTo(address token, uint256 amount, address to) external onlyOwner nonReentrant {\r\n        require(token != address(0), \"UserVault: Invalid token address\");\r\n        require(amount > 0, \"UserVault: Amount must be greater than 0\");\r\n        require(to != address(0), \"UserVault: Invalid recipient address\");\r\n        require(tokenBalances[token] >= amount, \"UserVault: Insufficient vault balance\");\r\n        \r\n        // Update vault balance\r\n        tokenBalances[token] -= amount;\r\n        \r\n        // Transfer tokens to specified address\r\n        IERC20(token).safeTransfer(to, amount);\r\n        \r\n        emit TokensWithdrawn(token, amount, to, block.timestamp);\r\n    }\r\n    \r\n    /**\r\n     * @dev Withdraws all tokens of a specific type\r\n     * @param token The ERC-20 token contract address\r\n     */\r\n    function withdrawAll(address token) external onlyOwner nonReentrant {\r\n        require(token != address(0), \"UserVault: Invalid token address\");\r\n        uint256 balance = tokenBalances[token];\r\n        require(balance > 0, \"UserVault: No tokens to withdraw\");\r\n        \r\n        // Update vault balance\r\n        tokenBalances[token] -= balance;\r\n        \r\n        // Transfer tokens to owner\r\n        IERC20(token).safeTransfer(owner(), balance);\r\n        \r\n        emit TokensWithdrawn(token, balance, owner(), block.timestamp);\r\n    }\r\n    \r\n    /**\r\n     * @dev Gets the balance of a specific token in the vault\r\n     * @param token The ERC-20 token contract address\r\n     * @return balance The actual token balance in the vault\r\n     */\r\n    function getBalance(address token) external view returns (uint256) {\r\n        // Return the actual token balance instead of just the internal tracking\r\n        return IERC20(token).balanceOf(address(this));\r\n    }\r\n    \r\n    /**\r\n     * @dev Gets balances of multiple tokens\r\n     * @param tokens Array of token addresses\r\n     * @return balances Array of corresponding actual balances\r\n     */\r\n    function getBalances(address[] calldata tokens) external view returns (uint256[] memory) {\r\n        uint256[] memory balances = new uint256[](tokens.length);\r\n        for (uint256 i = 0; i < tokens.length; i++) {\r\n            // Return the actual token balance instead of just the internal tracking\r\n            balances[i] = IERC20(tokens[i]).balanceOf(address(this));\r\n        }\r\n        return balances;\r\n    }\r\n    \r\n    /**\r\n     * @dev Gets all supported token addresses\r\n     * @return tokens Array of supported token addresses\r\n     */\r\n    function getSupportedTokens() external view returns (address[] memory) {\r\n        return supportedTokens;\r\n    }\r\n    \r\n    /**\r\n     * @dev Automatically registers tokens that have balances but aren't in supported tokens\r\n     * This allows the vault to track tokens that were sent directly\r\n     */\r\n    function registerExistingTokens(address[] calldata tokens) external onlyOwner {\r\n        for (uint256 i = 0; i < tokens.length; i++) {\r\n            address token = tokens[i];\r\n            if (token != address(0) && !isTokenSupported[token]) {\r\n                // Check if the token actually has a balance\r\n                uint256 balance = IERC20(token).balanceOf(address(this));\r\n                if (balance > 0) {\r\n                    supportedTokens.push(token);\r\n                    isTokenSupported[token] = true;\r\n                    // Update internal tracking to match actual balance\r\n                    tokenBalances[token] = balance;\r\n                    emit TokenAdded(token, block.timestamp);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @dev Gets the total number of supported tokens\r\n     * @return count The number of supported tokens\r\n     */\r\n    function getSupportedTokenCount() external view returns (uint256) {\r\n        return supportedTokens.length;\r\n    }\r\n    \r\n    /**\r\n     * @dev Gets vault information\r\n     * @return ownerAddress The owner's address\r\n     * @return factoryAddress The factory contract address\r\n     * @return tokenCount The number of supported tokens\r\n     * @return totalValue The total value (placeholder for future implementation)\r\n     */\r\n    function getVaultInfo() external view returns (\r\n        address ownerAddress,\r\n        address factoryAddress,\r\n        uint256 tokenCount,\r\n        uint256 totalValue\r\n    ) {\r\n        ownerAddress = owner();\r\n        factoryAddress = factory;\r\n        tokenCount = supportedTokens.length;\r\n        totalValue = 0; // Placeholder for future value calculation\r\n    }\r\n    \r\n    /**\r\n     * @dev Emergency function to remove a token from supported list (only owner)\r\n     * @param token The token address to remove\r\n     */\r\n    function removeToken(address token) external onlyOwner {\r\n        require(isTokenSupported[token], \"UserVault: Token not supported\");\r\n        require(tokenBalances[token] == 0, \"UserVault: Cannot remove token with balance\");\r\n        \r\n        // Remove from supported tokens array\r\n        for (uint256 i = 0; i < supportedTokens.length; i++) {\r\n            if (supportedTokens[i] == token) {\r\n                supportedTokens[i] = supportedTokens[supportedTokens.length - 1];\r\n                supportedTokens.pop();\r\n                break;\r\n            }\r\n        }\r\n        \r\n        isTokenSupported[token] = false;\r\n        emit TokenRemoved(token, block.timestamp);\r\n    }\r\n    \r\n    /**\r\n     * @dev Allows the vault to receive ETH (for future functionality)\r\n     */\r\n    receive() external payable {\r\n        // Vault can receive ETH but doesn't track it in tokenBalances\r\n        // This is for future functionality like WETH wrapping\r\n    }\r\n}\r\n"
      },
      "project/contracts/VaultFactory.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.28;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"./UserVault.sol\";\r\n\r\n/**\r\n * @title VaultFactory\r\n * @dev Factory contract for creating user-specific vaults\r\n * @notice Each user can have only one vault, linked to their Vincent wallet address\r\n */\r\ncontract VaultFactory is Ownable {\r\n    constructor() Ownable(msg.sender) {}\r\n    // Mapping from user address to their vault address\r\n    mapping(address => address) public userVaults;\r\n    \r\n    // Array of all created vaults\r\n    address[] public allVaults;\r\n    \r\n    // Events\r\n    event VaultCreated(address indexed user, address indexed vault, uint256 timestamp);\r\n    event VaultRemoved(address indexed user, address indexed vault);\r\n    \r\n    /**\r\n     * @dev Creates a new vault for the caller\r\n     * @notice Each user can only have one vault\r\n     * @return vaultAddress The address of the newly created vault\r\n     */\r\n    function createVault() external returns (address) {\r\n        require(userVaults[msg.sender] == address(0), \"VaultFactory: User already has a vault\");\r\n        \r\n        // Deploy new UserVault contract\r\n        UserVault newVault = new UserVault(msg.sender, address(this));\r\n        address vaultAddress = address(newVault);\r\n        \r\n        // Store the vault address for the user\r\n        userVaults[msg.sender] = vaultAddress;\r\n        allVaults.push(vaultAddress);\r\n        \r\n        emit VaultCreated(msg.sender, vaultAddress, block.timestamp);\r\n        \r\n        return vaultAddress;\r\n    }\r\n    \r\n    /**\r\n     * @dev Gets the vault address for a specific user\r\n     * @param user The user's address\r\n     * @return vaultAddress The address of the user's vault, or address(0) if none exists\r\n     */\r\n    function getVault(address user) external view returns (address) {\r\n        return userVaults[user];\r\n    }\r\n    \r\n    /**\r\n     * @dev Checks if a user has a vault\r\n     * @param user The user's address\r\n     * @return hasVault True if the user has a vault, false otherwise\r\n     */\r\n    function hasVault(address user) external view returns (bool) {\r\n        return userVaults[user] != address(0);\r\n    }\r\n    \r\n    /**\r\n     * @dev Gets the total number of vaults created\r\n     * @return count The number of vaults\r\n     */\r\n    function getVaultCount() external view returns (uint256) {\r\n        return allVaults.length;\r\n    }\r\n    \r\n    /**\r\n     * @dev Gets all vault addresses (for admin purposes)\r\n     * @return vaults Array of all vault addresses\r\n     */\r\n    function getAllVaults() external view onlyOwner returns (address[] memory) {\r\n        return allVaults;\r\n    }\r\n    \r\n    /**\r\n     * @dev Removes a vault (only owner can do this in case of emergency)\r\n     * @param user The user whose vault should be removed\r\n     */\r\n    function removeVault(address user) external onlyOwner {\r\n        address vaultAddress = userVaults[user];\r\n        require(vaultAddress != address(0), \"VaultFactory: No vault exists for this user\");\r\n        \r\n        // Remove from mapping\r\n        delete userVaults[user];\r\n        \r\n        // Remove from array (find and swap with last element)\r\n        for (uint256 i = 0; i < allVaults.length; i++) {\r\n            if (allVaults[i] == vaultAddress) {\r\n                allVaults[i] = allVaults[allVaults.length - 1];\r\n                allVaults.pop();\r\n                break;\r\n            }\r\n        }\r\n        \r\n        emit VaultRemoved(user, vaultAddress);\r\n    }\r\n}"
      },
      "project/contracts/VolatilityIndex.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.28;\r\n\r\nimport \"@pythnetwork/pyth-sdk-solidity/IPyth.sol\";\r\nimport \"@pythnetwork/pyth-sdk-solidity/PythStructs.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\n/**\r\n * @title VolatilityIndex\r\n * @dev Contract to track and store volatility data for token pairs using Pyth price feeds\r\n * @notice Integrates with Pyth oracle to ensure fresh price data and calculates volatility metrics\r\n */\r\ncontract VolatilityIndex is Ownable {\r\n    IPyth public pyth;\r\n    \r\n    struct VolatilityData {\r\n        uint256 volatilityBps;  // Volatility in basis points (5000 = 50%)\r\n        uint256 price;          // Current price at time of calculation\r\n        uint256 timestamp;      // When this volatility was calculated\r\n        uint256 confidence;     // Pyth confidence interval\r\n    }\r\n    \r\n    // Mapping from price feed ID to volatility data\r\n    mapping(bytes32 => VolatilityData) public volatilityData;\r\n    \r\n    // Array of supported price feed IDs\r\n    bytes32[] public supportedFeeds;\r\n    \r\n    // Mapping to check if a feed is supported\r\n    mapping(bytes32 => bool) public isFeedSupported;\r\n    \r\n    // Events\r\n    event VolatilityUpdated(\r\n        bytes32 indexed priceFeedId, \r\n        uint256 volatilityBps, \r\n        uint256 price, \r\n        uint256 timestamp,\r\n        uint256 confidence\r\n    );\r\n    event FeedAdded(bytes32 indexed priceFeedId);\r\n    event FeedRemoved(bytes32 indexed priceFeedId);\r\n    \r\n    /**\r\n     * @dev Constructor sets the Pyth contract address\r\n     * @param pythContract The address of the Pyth price feeds contract\r\n     */\r\n    constructor(address pythContract) Ownable(msg.sender) {\r\n        require(pythContract != address(0), \"VolatilityIndex: Invalid Pyth contract address\");\r\n        pyth = IPyth(pythContract);\r\n    }\r\n    \r\n    /**\r\n     * @dev Updates volatility data for a specific price feed\r\n     * @param priceUpdate The encoded price update data from Pyth Hermes\r\n     * @param priceFeedId The price feed ID to update\r\n     * @param volatilityBps The calculated volatility in basis points\r\n     */\r\n    function updateVolatility(\r\n        bytes[] calldata priceUpdate,\r\n        bytes32 priceFeedId,\r\n        uint256 volatilityBps\r\n    ) external payable onlyOwner {\r\n        require(priceUpdate.length > 0, \"VolatilityIndex: Empty price update\");\r\n        require(volatilityBps <= 1000000, \"VolatilityIndex: Invalid volatility (max 10000%)\");\r\n        \r\n        // Update Pyth price feeds on-chain\r\n        uint fee = pyth.getUpdateFee(priceUpdate);\r\n        require(msg.value >= fee, \"VolatilityIndex: Insufficient fee\");\r\n        \r\n        pyth.updatePriceFeeds{value: fee}(priceUpdate);\r\n        \r\n        // Get the current price from Pyth\r\n        PythStructs.Price memory price = pyth.getPriceNoOlderThan(priceFeedId, 60);\r\n        \r\n        // Store volatility data\r\n        volatilityData[priceFeedId] = VolatilityData({\r\n            volatilityBps: volatilityBps,\r\n            price: uint256(uint64(price.price)),\r\n            timestamp: block.timestamp,\r\n            confidence: uint256(uint64(price.conf))\r\n        });\r\n        \r\n        // Add to supported feeds if not already added\r\n        if (!isFeedSupported[priceFeedId]) {\r\n            supportedFeeds.push(priceFeedId);\r\n            isFeedSupported[priceFeedId] = true;\r\n            emit FeedAdded(priceFeedId);\r\n        }\r\n        \r\n        emit VolatilityUpdated(\r\n            priceFeedId, \r\n            volatilityBps, \r\n            uint256(uint64(price.price)), \r\n            block.timestamp,\r\n            uint256(uint64(price.conf))\r\n        );\r\n        \r\n        // Refund excess fee\r\n        if (msg.value > fee) {\r\n            payable(msg.sender).transfer(msg.value - fee);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @dev Gets the current volatility data for a price feed\r\n     * @param priceFeedId The price feed ID\r\n     * @return data The volatility data struct\r\n     */\r\n    function getVolatilityData(bytes32 priceFeedId) external view returns (VolatilityData memory data) {\r\n        return volatilityData[priceFeedId];\r\n    }\r\n    \r\n    /**\r\n     * @dev Gets the current volatility in basis points\r\n     * @param priceFeedId The price feed ID\r\n     * @return volatilityBps The volatility in basis points\r\n     */\r\n    function getVolatility(bytes32 priceFeedId) external view returns (uint256 volatilityBps) {\r\n        return volatilityData[priceFeedId].volatilityBps;\r\n    }\r\n    \r\n    /**\r\n     * @dev Gets the current price for a price feed\r\n     * @param priceFeedId The price feed ID\r\n     * @return price The current price\r\n     */\r\n    function getCurrentPrice(bytes32 priceFeedId) external view returns (uint256 price) {\r\n        return volatilityData[priceFeedId].price;\r\n    }\r\n    \r\n    /**\r\n     * @dev Gets the last update timestamp for a price feed\r\n     * @param priceFeedId The price feed ID\r\n     * @return timestamp The last update timestamp\r\n     */\r\n    function getLastUpdate(bytes32 priceFeedId) external view returns (uint256 timestamp) {\r\n        return volatilityData[priceFeedId].timestamp;\r\n    }\r\n    \r\n    /**\r\n     * @dev Gets all supported price feed IDs\r\n     * @return feeds Array of supported price feed IDs\r\n     */\r\n    function getSupportedFeeds() external view returns (bytes32[] memory feeds) {\r\n        return supportedFeeds;\r\n    }\r\n    \r\n    /**\r\n     * @dev Gets the number of supported feeds\r\n     * @return count The number of supported feeds\r\n     */\r\n    function getSupportedFeedCount() external view returns (uint256 count) {\r\n        return supportedFeeds.length;\r\n    }\r\n    \r\n    /**\r\n     * @dev Checks if a price feed is supported\r\n     * @param priceFeedId The price feed ID\r\n     * @return supported True if the feed is supported\r\n     */\r\n    function isSupported(bytes32 priceFeedId) external view returns (bool supported) {\r\n        return isFeedSupported[priceFeedId];\r\n    }\r\n    \r\n    /**\r\n     * @dev Removes a price feed from supported feeds (only owner)\r\n     * @param priceFeedId The price feed ID to remove\r\n     */\r\n    function removeFeed(bytes32 priceFeedId) external onlyOwner {\r\n        require(isFeedSupported[priceFeedId], \"VolatilityIndex: Feed not supported\");\r\n        \r\n        // Remove from supported feeds array\r\n        for (uint256 i = 0; i < supportedFeeds.length; i++) {\r\n            if (supportedFeeds[i] == priceFeedId) {\r\n                supportedFeeds[i] = supportedFeeds[supportedFeeds.length - 1];\r\n                supportedFeeds.pop();\r\n                break;\r\n            }\r\n        }\r\n        \r\n        isFeedSupported[priceFeedId] = false;\r\n        emit FeedRemoved(priceFeedId);\r\n    }\r\n    \r\n    /**\r\n     * @dev Emergency function to withdraw ETH (only owner)\r\n     */\r\n    function withdrawETH() external onlyOwner {\r\n        uint256 balance = address(this).balance;\r\n        require(balance > 0, \"VolatilityIndex: No ETH to withdraw\");\r\n        payable(owner()).transfer(balance);\r\n    }\r\n    \r\n    /**\r\n     * @dev Allows the contract to receive ETH\r\n     */\r\n    receive() external payable {\r\n        // Contract can receive ETH for Pyth fees\r\n    }\r\n}\r\n"
      }
    }
  }
}
